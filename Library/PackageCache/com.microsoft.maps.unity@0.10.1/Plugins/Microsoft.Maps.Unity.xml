<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Microsoft.Maps.Unity</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Maps.Unity.ClippingVolumeDistanceTextureResolution">
      <summary>
            Texture resolution used to render clipping volume walls.
            Higher resolution will have the best quality in terms of how closely the wall edge matches the terrain.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.ClippingVolumeDistanceTextureResolution.Low">
      <summary>
            Low resolution texture.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.ClippingVolumeDistanceTextureResolution.Medium">
      <summary>
            Medium resolution texture.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.ClippingVolumeDistanceTextureResolution.High">
      <summary>
            High resolution texture.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.LanguageChangedEvent">
      <summary>
            This event is raised when a <see cref="T:UnityEngine.SystemLanguage" /> value changes.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapDataCacheBase">
      <summary>
            This component provides an interface to configure the cache size that is used to store data of <see cref="T:Microsoft.Maps.Unity.MapRendererBase" />s.
            Because the cache is global, multiple instances of this component are not needed.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapDataCacheBase.ComputeCacheSizeInBytes">
      <summary>
            Computes the cache size to use.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapDataCacheBase.Refresh">
      <summary>
            Should be called if cache size has changed.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapSession">
      <summary>
            Provides credentials for components like <see cref="T:Microsoft.Maps.Unity.MapRendererBase" /> and services like MapLocationFinder, etc.
            Typically only one session needs to be created for a given scene.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapSession.GetRegion">
      <summary>
            Retrieves a string that contains an ISO 3166-1 alpha-2 country region code. The region value is used to ensure that
            disputed borders and location names align with the views of the specified user region. By default, this value is
            automatically detected but can be overriden via <see cref="P:Microsoft.Maps.Unity.MapSession.RegionOverride" />.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapSession.Current">
      <summary>
            The current <see cref="T:Microsoft.Maps.Unity.MapSession" /> that is active. Null if no session is active.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapSession.DeveloperKey">
      <summary>
            The key used for Bing Maps services. Sign up for a key at the <see href="https://www.bingmapsportal.com">Bing Maps Portal</see></summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapSession.ShowMapDataInEditor">
      <summary>
            If true, during edit mode shows map data. Data usage in the editor will apply to the session's developer key.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapSession.Language">
      <summary>
            The language determines the text used to display names of map content like city names, country/region names, etc.
            <br /><br />
            Unless this property has been set, the language is auto detected from the <see cref="P:UnityEngine.Application.systemLanguage" />.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapSession.LanguageChanged">
      <summary>
            This event is invoked when the <see cref="P:Microsoft.Maps.Unity.MapSession.Language" /> has changed.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapSession.RegionOverride">
      <summary>
            Overrides the automatically detected region with an ISO 3166-1 alpha-2 country region code, e.g. "US". The region value
            is used to ensure that disputed borders and location names align with the views of the specified user region.
            <br /><br />
            Due to the sensitivity of this feature, it is recommended to only use the override when testing and to let the map
            automatically detect the value in your production application.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.UnityWebRequestAwaiter">
      <summary>
            Enables UnityWebRequest operations to be awaited from within an async method.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.UnityWebRequestAwaiter.#ctor(UnityEngine.Networking.UnityWebRequestAsyncOperation)">
      <summary>
            Initializes the UnityWebRequestAwaiter from the specified UnityWebRequestAsyncOperation.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.UnityWebRequestAwaiter.GetResult">
      <summary>
            Returns the result. Void in this case.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.UnityWebRequestAwaiter.OnCompleted(System.Action)">
      <summary>
            Schedules the continuation action that's invoked when the instance completes.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.UnityWebRequestAwaiter.IsCompleted">
      <summary>
            True if the underlying async operation is completed.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.SystemLangaugeConverter">
      <summary>
            Handles conversion of <see cref="T:UnityEngine.SystemLanguage" /> values to LCIDs and culture codes.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.SystemLangaugeConverter.ToCultureCode(UnityEngine.SystemLanguage,System.String)">
      <summary>
            Returns the best match of a Bing Maps language code for the specified <see cref="T:UnityEngine.SystemLanguage" />.
            Then if specified, appends the region string to the language code to create a culture code.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.SystemLangaugeConverter.ToLcid(UnityEngine.SystemLanguage)">
      <summary>
            Converts the language to best matching LCID.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.UnityTaskFactory">
      <summary>
            Runs Tasks on Unity's main thread.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.UnityTaskFactory.IsOnMainThread">
      <summary>
            Returns true if the current thread is the Unity main thread.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.UnityTaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
      <summary>
            Starts a new task. The task will be executed on Unity's main thread.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.UnityTaskFactory.StartNew(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>
            Starts a new task. The task will be executed on Unity's main thread.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.UnityTaskFactory.StartNew``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>
            Starts a new task. The task will be executed on Unity's main thread.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.UnityTaskFactory.AssertOnMainThread">
      <summary>
            Asserts that the current thread is the Unity main thread.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.UnityTaskFactory.AssertNotOnMainThread">
      <summary>
            Asserts that the current thread is not the Unity main thread.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.UnityTaskFactory.ThrowIfNotOnMainThread">
      <summary>
            Throw an exception if the current thread is not the Unity main thread.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.UnityTaskFactory.UnityMainThreadId">
      <summary>
            The Unity main thread ID.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapLabel">
      <summary>
            This component is used to transfer labeling information to a GameObject.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapLabel.Text">
      <summary>
            The text of the label.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapLabel.Style">
      <summary>
            The recommended styling information for this label.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapLabel.IsLayerSynchronized">
      <summary>
            If true, synchronizes this <see cref="T:UnityEngine.GameObject" />'s and it's childrens' layers to the same value as the
            associated <see cref="T:Microsoft.Maps.Unity.MapRendererBase" />'s layer.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapLabel.ScaleCurve">
      <summary>
            The scale of the <see cref="T:Microsoft.Maps.Unity.MapLabel" /> relative to the map's zoom level.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapLabelLayer">
      <summary>
            This layer can be added to a <see cref="T:Microsoft.Maps.Unity.MapRendererBase" /> to enable labeling. In order for this layer to function properly,
            a prefab containing a <see cref="T:Microsoft.Maps.Unity.MapLabel" /> component must be set on this layer.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapLabelLayer.MapLabelPrefab">
      <summary>
            The GameObject used to replicate labels into the map.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.FontStyle">
      <summary>
            The style of the font.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.FontStyle.Normal">
      <summary>
            Default font style.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.FontStyle.Italic">
      <summary>
            Slanted font style.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.FontWeight">
      <summary>
            The weight of the font.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.FontWeight.Normal">
      <summary>
            Default weight.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.FontWeight.Bold">
      <summary>
            Thick stroked font weight.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.Style">
      <summary>
            Encapsulate recommended styling information about a label.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.Style.Rank">
      <summary>
            Gets the recommended ranking of the label which can be used to determine label size.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.Style.Color">
      <summary>
            Gets the recommended color of the label.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.Style.FontStyle">
      <summary>
            Gets the recommended style of the the label.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.Style.FontWeight">
      <summary>
            Gets the recommended weight of the label.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapColliderType">
      <summary>
            The type of collider that the map is using.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapColliderType.None">
      <summary>
            No collider.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapColliderType.BaseOnly">
      <summary>
            Collider covering the base of the map.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapColliderType.FullExtents">
      <summary>
            Collider covering the full extents of the map.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapRendererBase">
      <summary>
            Base class to manage streaming and rendering of map data.
            </summary>
      <summary>
            Includes ray casting specific logic for the <see cref="T:Microsoft.Maps.Unity.MapRendererBase" />.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapRendererBase.CurrentVersion">
      <summary>
            Versions:<br /><b>1</b> - Added support for <see cref="T:Microsoft.Maps.Unity.TextureTileLayer" />.<br /><b>2</b> - Added support for <see cref="T:Microsoft.Maps.Unity.ElevationTileLayer" />.<br /><b>3</b> - Added option to control type of <see cref="T:UnityEngine.Collider" /> associated with the map.<br /></summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapRendererBase.MaxTextureTileLayerCount">
      <summary>
            Gets the maximum number of <see cref="T:Microsoft.Maps.Unity.TextureTileLayer" /> instances that can be put into <see cref="P:Microsoft.Maps.Unity.MapRendererBase.TextureTileLayers" />.
            This is dictated by the slots set up in the shader.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.OneTimeSetup(System.Int32)">
      <summary>
            This method is ran when the component is first created and initialized, e.g. when the component is added to
            a <see cref="T:UnityEngine.GameObject" /> in the editor, or in a script when a component is first added to a <see cref="T:UnityEngine.GameObject" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.Finalize">
      <summary>
            Finalizer.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.Dispose">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.Dispose(System.Boolean)">
      <summary>
            Disposes managed and unmanaged resources.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.OnValidate">
      <summary>
            Clamps serializable fields to valid ranges. Called when the script is loaded or any value is changed in the inspector.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.Awake">
      <summary>
            Awake is called when the script instance is being loaded.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.OnEnable">
      <summary>
            OnEnable is called when the component is enabled and when scripts are reloaded.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.Reset">
      <summary>
            Reset is called to initialize the script’s properties when first attached to the object and when the Reset command is used.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.Update">
      <summary>
            Update is called every frame, if the <see cref="T:Microsoft.Maps.Unity.MapRendererBase" /> is enabled.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.OnDisable">
      <summary>
            This method is called when the <see cref="T:Microsoft.Maps.Unity.MapRendererBase" /> becomes disabled.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.RunAnimation(Microsoft.Geospatial.LatLon@,System.Single@)">
      <summary>
            If an animation is active, runs a single frame of the animation and returns true.
            If no animation is active, returns false.
            </summary>
      <param name="newCenter">The updated center for this frame.</param>
      <param name="newZoomLevel">The updated zoom level for this frame.</param>
      <returns>True if the animation has made changes to center and zoom level</returns>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.CancelAnimation">
      <summary>
            Called when the active animation should be cancelled.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.EnableMaterialKeyword(System.String)">
      <summary>
            Enables the specified keyword on the active terrain and clipping volume materials.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.DisableMaterialKeyword(System.String)">
      <summary>
            Disables the specified keyword on the active terrain and clipping volume materials.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.ApplyClippingVolumePropertiesToMaterial(UnityEngine.Material)">
      <summary>
            For external objects that want to match the clipping bounds of the map,
            this method will apply all necessary values and keywords to a specified
            material so that it would be able to mimic the clipping behavior.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.TrackAndPositionPinnables(System.Collections.Generic.IReadOnlyList{Microsoft.Maps.Unity.IPinnable})">
      <summary>
            Updates the positions of the specified <see cref="T:Microsoft.Maps.Unity.IPinnable" />s.
            <br /><br />
            This can potentially begin an asynchronous operation for a given <see cref="T:Microsoft.Maps.Unity.IPinnable" /> to determine the elevation offset due
            to the map's current terrain surface. Whether or not this is required depends on the <see cref="P:Microsoft.Maps.Unity.IPinnable.AltitudeReference" />
            value. An asynchronous operation only take place when the <see cref="T:Microsoft.Maps.Unity.IPinnable" /> uses <see cref="F:Microsoft.Geospatial.AltitudeReference.Surface" />
            or <see cref="F:Microsoft.Geospatial.AltitudeReference.Terrain" />. Otherwise, no asynchronous computations are required.
            <br /><br />
            When a <see cref="T:Microsoft.Maps.Unity.IPinnable" /> is no longer in view or has been removed, call <see cref="M:Microsoft.Maps.Unity.MapRendererBase.UntrackPinnable(Microsoft.Maps.Unity.IPinnable)" /> to
            cancel any potential outstanding asynchronous operations. This is not required but is recommended.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.UntrackPinnable(Microsoft.Maps.Unity.IPinnable)">
      <summary>
            Cancels the positioning and asynchronous elevation sampling for the <see cref="T:Microsoft.Maps.Unity.IPinnable" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.Raycast(UnityEngine.Ray,Microsoft.Maps.Unity.MapRendererRaycastHit@)">
      <summary>
            Casts a ray against the map and returns detailed information about the hitpoint.
            </summary>
      <returns>True when the ray intersects the map, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.Raycast(UnityEngine.Ray,Microsoft.Maps.Unity.MapRendererRaycastHit@,System.Single)">
      <summary>
            Casts a ray against the map and returns detailed information about the hitpoint.
            </summary>
      <returns>True when the ray intersects the map, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,Microsoft.Maps.Unity.MapRendererRaycastHit@)">
      <summary>
            Casts a ray against the map and returns detailed information about the hitpoint.
            </summary>
      <returns>True when the ray intersects the map, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererBase.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,Microsoft.Maps.Unity.MapRendererRaycastHit@,System.Single)">
      <summary>
            Casts a ray against the map and returns detailed information about the hitpoint.
            </summary>
      <returns>True when the ray intersects the map, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.MapSession">
      <summary>
            The <see cref="T:Microsoft.Maps.Unity.MapSession" /> used for managing credentials with Bing Maps services.
            A <see cref="T:Microsoft.Maps.Unity.MapSession" /> with a valid key must be present to use Bing Maps data.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.Copyright">
      <summary>
            The copyrights and attribution text, which may change based on the current map view.
            This string must be displayed near the associated <see cref="T:Microsoft.Maps.Unity.MapRendererBase" />.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.MapEdgeColor">
      <summary>
            The color of the map edge.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.MapEdgeColorFadeDistance">
      <summary>
            Starting at the map edge, this value is the distance normalized from the map dimension over which the edge color is faded.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.DetailOffset">
      <summary>
            Increases or decreases the detail of the map. Lower values are less detailed. Higher values are more detailed. Default is 0.
            </summary>
      <remarks>
            Altering the value can have large impacts on performance.
            </remarks>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.Center">
      <summary>
            Center of the map.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.ZoomLevel">
      <summary>
            Zoom level. Lower values are more zoomed out. Higher values are more zoomed in.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.MinimumZoomLevel">
      <summary>
            The minimum zoom level to enforce on the map. 1.0 is the smallest possible zoom level value, and 20.0 is the largest.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.MaximumZoomLevel">
      <summary>
            The maximum zoom level to enforce on the map. 1.0 is the smallest possible zoom level value, and 20.0 is the largest.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.MapTerrainType">
      <summary>
            The type of terrain used for rendering the map.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.MapShape">
      <summary>
            The shape of the map we are rendering on.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.ElevationBaseline">
      <summary>
            The altitude in WGS84 meters in which the map's terrain surface has been negatively offset.
            </summary>
      <remarks>
            As the terrain data changes, the map will align to the lowest minimum elevation for the current view. This allows for the map
            surface to still be visible in high-altitude areas. If this elevation baseline was not accounted for in these high-altitude
            views, then the map surface would be too tall, and likely not viewable.
             </remarks>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.LocalMapDimension">
      <summary>
            The width and length of the map object in its local coordinate system before any transforms are applied.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.LocalMapRadius">
      <summary>
            The radius of the map object in its local coordinate system before any transforms are applied.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.MapDimension">
      <summary>
            The width and length of the map object with global scale applied.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.LocalMapBaseHeight">
      <summary>
            The height of the map object in its local coordinate system before any transforms are applied.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.MapBaseHeight">
      <summary>
            The height of the map with global scale applied, i.e. <see cref="P:Microsoft.Maps.Unity.MapRendererBase.LocalMapBaseHeight" /> * transform.lossyScale.y.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.LocalMapHeight">
      <summary>
            The height of the map's bounds. Changes based on map content.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.Bounds">
      <summary>
            The bounds of the current map view in <see cref="T:Microsoft.Geospatial.LatLon" /> coordinates.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.ElevationScale">
      <summary>
            The scale to apply to the vertical dimension of the map. This can be used to exaggerate the terrain's elevation.
            Pinned object positions and other primitives that depend on true elevation values should take this scale into account.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.CastShadows">
      <summary>
            True if the map should cast shadows.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.ReceiveShadows">
      <summary>
            True if the map should receive shadows.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.EnableMrtkMaterialIntegration">
      <summary>
            True if the terrain material should enable MRTK-related features like hover light.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.TerrainMaterial">
      <summary>
            This is the base <see cref="T:UnityEngine.Material" /> used to render the terrain. Variants of this <see cref="T:UnityEngine.Material" />
            are generated with different sets of keywords to properly handle rendering different terrain types. External
            modifications made to the specified <see cref="T:UnityEngine.Material" />'s properties, e.g. changing a color value, will
            be copied each frame to these variants.
            <br /><br />
            If null is set, the default terrain <see cref="T:UnityEngine.Material" /> will be used.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.IsClippingVolumeWallEnabled">
      <summary>
            True if the clipping volume wall should be rendered.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.ClippingVolumeMaterial">
      <summary>
            This is the base <see cref="T:UnityEngine.Material" /> used to render the side walls of the mao. Variants of this
            <see cref="T:UnityEngine.Material" /> are generated with different sets of keywords to properly handle rendering different terrain types.
            External modifications made to the specified <see cref="T:UnityEngine.Material" />'s properties, e.g. changing a color value, will
            be copied each frame to these variants.
            <br /><br />
            If null is set, the default terrain <see cref="T:UnityEngine.Material" /> will be used.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.TextureTileLayers">
      <summary>
            The collection of active <see cref="T:Microsoft.Maps.Unity.TextureTileLayer" />s.
            Only the first <see cref="F:Microsoft.Maps.Unity.MapRendererBase.MaxTextureTileLayerCount" /> entries will be used.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.ElevationTileLayers">
      <summary>
            The collection of active <see cref="T:Microsoft.Maps.Unity.ElevationTileLayer" />s.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.MercatorBoundingBox">
      <summary>
            The bounding box of the map in Mercator space.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.MercatorBoundingCircle">
      <summary>
            The bounding circle of the map in Mercator space.
            Only applicable when <see cref="P:Microsoft.Maps.Unity.MapRendererBase.MapShape" /> is <see cref="F:Microsoft.Maps.Unity.MapShape.Cylinder" />.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererBase.IsLoaded">
      <summary>
            True if the <see cref="T:Microsoft.Maps.Unity.MapRendererBase" /> has loaded all data for the current view.
            </summary>
    </member>
    <member name="E:Microsoft.Maps.Unity.MapRendererBase.AfterOnDisable">
      <summary>
            Called after <see cref="T:Microsoft.Maps.Unity.MapRendererBase" /> has executed OnDisable().
            </summary>
    </member>
    <member name="E:Microsoft.Maps.Unity.MapRendererBase.MapSessionChanged">
      <summary>
            Called when the <see cref="P:Microsoft.Maps.Unity.MapRendererBase.MapSession" /> associated with this instance has changed. This may happen if the existing
            <see cref="T:Microsoft.Maps.Unity.MapSession" /> was destroyed or a new <see cref="P:Microsoft.Maps.Unity.MapRendererBase.MapSession" /> was assigned.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapRendererRaycastHit">
      <summary>
            Structure used to get information back form a raycast of a MapRenderer.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererRaycastHit.#ctor(System.Single,UnityEngine.Vector3,UnityEngine.Vector3,Microsoft.Geospatial.LatLonAlt)">
      <summary>
            Constructs a <see cref="T:Microsoft.Maps.Unity.MapRendererRaycastHit" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererRaycastHit.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererRaycastHit.Equals(Microsoft.Maps.Unity.MapRendererRaycastHit)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererRaycastHit.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererRaycastHit.op_Equality(Microsoft.Maps.Unity.MapRendererRaycastHit,Microsoft.Maps.Unity.MapRendererRaycastHit)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRendererRaycastHit.op_Inequality(Microsoft.Maps.Unity.MapRendererRaycastHit,Microsoft.Maps.Unity.MapRendererRaycastHit)">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererRaycastHit.Distance">
      <summary>
            Distance to the hit point from the origin of the raycast.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererRaycastHit.Point">
      <summary>
            The impact point in world space where the ray hit the MapRenderer.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererRaycastHit.Normal">
      <summary>
            The normal vector of the triangle that was hit.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRendererRaycastHit.Location">
      <summary>
            The geographic location where the ray hit the MapRenderer.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapShape">
      <summary>
            The shape of the <see cref="T:Microsoft.Maps.Unity.MapRendererBase" />.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapShape.Block">
      <summary>
            Default shape. The map is rendered on a rectangular block.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapShape.Cylinder">
      <summary>
            Map is rendered on a cylinder.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapTerrainType">
      <summary>
            The type of terrain used for rendering the map.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapTerrainType.Default">
      <summary>
            The map terrain consists of either elevation data or high resolution 3D models.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapTerrainType.Elevated">
      <summary>
            The map terrain consists only of elevation data. No high resolution 3D models are used.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapTerrainType.Flat">
      <summary>
            Both elevation and high resolution 3D models are disabled. The map will be flat.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapScene">
      <summary>
            MapScene is used for changing and animating the map view.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapScene.GetLocationAndZoomLevel(Microsoft.Geospatial.LatLon@,System.Double@)">
      <summary>
            Returns the location and zoom level for the <see cref="T:Microsoft.Maps.Unity.MapScene" />.
            </summary>
      <remarks>
            Derived classes should use this method to calculate the target location and zoom level.
            </remarks>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapSceneOfLabelAndZoomLevel">
      <summary>
            A <see cref="T:Microsoft.Maps.Unity.MapScene" /> that can be used to animate to a specified <see cref="P:Microsoft.Maps.Unity.MapSceneOfLabelAndZoomLevel.MapLabel" /> and zoom level.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapSceneOfLabelAndZoomLevel.#ctor(Microsoft.Maps.Unity.MapLabel,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.Unity.MapSceneOfLabelAndZoomLevel" /> class from the specified location and zoom level.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapSceneOfLabelAndZoomLevel.GetLocationAndZoomLevel(Microsoft.Geospatial.LatLon@,System.Double@)">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Maps.Unity.MapSceneOfLabelAndZoomLevel.MapLabel">
      <summary>
            The <see cref="T:Microsoft.Maps.Unity.MapLabel" /> that is animated to.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapSceneOfLabelAndZoomLevel.ZoomLevel">
      <summary>
            The zoom level that is animated to.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.IPinnable">
      <summary>
            A type that can be positioned on a map by it's geographic coordinate.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.IPinnable.MercatorCoordinate">
      <summary>
            The position of the <see cref="T:Microsoft.Maps.Unity.IPinnable" /> in Mercator coordinates.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.IPinnable.Altitude">
      <summary>
            The altitude of the <see cref="T:Microsoft.Maps.Unity.IPinnable" /> above a reference datum in meters.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.IPinnable.AltitudeReference">
      <summary>
            The reference datum that the <see cref="P:Microsoft.Maps.Unity.IPinnable.Altitude" /> is relative to.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.IPinnable.PositionInMapLocalSpace">
      <summary>
            The position of this <see cref="T:Microsoft.Maps.Unity.IPinnable" /> in the local space of the associated map.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.IPinnable.HasBeenFullyPositioned">
      <summary>
            True once the <see cref="T:Microsoft.Maps.Unity.IPinnable" /> has been positioned relative to a given map and sampled elevation.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.DefaultElevationTileLayer">
      <summary>
            The <see cref="T:Microsoft.Maps.Unity.DefaultElevationTileLayer" /> is used to display Bing Maps 3D elevation data, which has world-wide coverage.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.DefaultElevationTileLayer.HasElevationTile(Microsoft.Geospatial.TileId,System.Threading.CancellationToken)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.DefaultElevationTileLayer.GetElevationTileData(Microsoft.Geospatial.TileId,System.Threading.CancellationToken)">
      <inheritdoc />
    </member>
    <member name="T:Microsoft.Maps.Unity.DefaultTextureTileLayer">
      <summary>
            A <see cref="T:Microsoft.Maps.Unity.TextureTileLayer" /> that displays Bing Maps imagery.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.DefaultTextureTileLayer.GetTexture(Microsoft.Geospatial.TileId,System.Threading.CancellationToken)">
      <summary>
            This method can only be used by <see cref="P:Microsoft.Maps.Unity.MapRendererBase.TextureTileLayers" /> and will fail if called.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.DefaultTextureTileLayer.ToString">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.DefaultTextureTileLayer.Awake">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.DefaultTextureTileLayer.OnEnable">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.DefaultTextureTileLayer.OnDisable">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Maps.Unity.DefaultTextureTileLayer.ImageryType">
      <summary>
            The base imagery to use for the <see cref="T:Microsoft.Maps.Unity.TextureTileLayer" />, aerial or symbolic.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.DefaultTextureTileLayer.AreRoadsEnabled">
      <summary>
            True if roads, borders, and other lines are included in the texture.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.DefaultTextureTileLayer.AreLabelsEnabled">
      <summary>
            True if labels are included in the texture.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.DefaultTextureTileLayer.IsHillShadingEnabled">
      <summary>
            True if hill shading is enabled. Does not apply to <see cref="F:Microsoft.Maps.Unity.MapImageryType.Aerial" />.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.DefaultTextureTileLayer.ImageryStyle">
      <summary>
            The style to use for the imagery.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.DefaultTextureTileLayer.Language">
      <summary>
            The language used for labels, if present. This value is synchronized with the <see cref="P:Microsoft.Maps.Unity.MapSession.Language" />.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.DefaultTrafficTextureTileLayer">
      <summary>
            A <see cref="T:Microsoft.Maps.Unity.TextureTileLayer" /> that displays Bing Maps traffic tiles.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.DefaultTrafficTextureTileLayer.GetTexture(Microsoft.Geospatial.TileId,System.Threading.CancellationToken)">
      <summary>
            This method can only be used by <see cref="P:Microsoft.Maps.Unity.MapRendererBase.TextureTileLayers" /> and will fail if called.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.DefaultTrafficTextureTileLayer.ToString">
      <inheritdoc />
    </member>
    <member name="T:Microsoft.Maps.Unity.ElevationTile">
      <summary>
            An <see cref="T:Microsoft.Maps.Unity.ElevationTile" /> contains the elevation data used for rendering, ray casting, and pin placement.
            The data is provided in some form of a height map where each pixel or entry represents an elevation value in meters
            relative to the WGS84 ellipsoid. The extents of the tile are defined in Mercator space by the <see cref="P:Microsoft.Maps.Unity.ElevationTile.TileId" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ElevationTile.FromDataInMeters(Microsoft.Geospatial.TileId,System.Int32,System.Int32,System.Single[])">
      <summary>
            Creates an <see cref="T:Microsoft.Maps.Unity.ElevationTile" /> from elevation data in meters.
            Data should be row-major with origin in the northwest corner.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ElevationTile.FromDataInMeters(Microsoft.Geospatial.TileId,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Creates an <see cref="T:Microsoft.Maps.Unity.ElevationTile" /> from elevation data in meters encoded as raw <see cref="T:System.Byte" />s.
            Each 4-bytes is expected to represent a floating point value. Each float represents an elevation in meters.
            Data should be row-major with origin in the northwest corner.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ElevationTile.FromNormalizedData(Microsoft.Geospatial.TileId,System.Int32,System.Int32,System.Single,System.Single,System.UInt16[])">
      <summary>
            Creates an <see cref="T:Microsoft.Maps.Unity.ElevationTile" /> from elevation data normalized into fxied point 16-bit values encoded as ushorts.
            The original elevation in meters can be reconstructed from the minElevationInMeters, the elevationRangeInMeters,
            and the normalized data. Data should be row-major with origin in the northwest corner.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ElevationTile.FromNormalizedData(Microsoft.Geospatial.TileId,System.Int32,System.Int32,System.Single,System.Single,System.Byte[],System.Int32)">
      <summary>
            Creates an <see cref="T:Microsoft.Maps.Unity.ElevationTile" /> from elevation data normalized into fixed point 16-bit values encoded as bytes.
            The original elevation in meters can be reconstructed from the minElevationInMeters, the elevationRangeInMeters,
            and the normalized data. Data should be row-major with origin in the northwest corner.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ElevationTile.FromNull">
      <summary>
            Used for an <see cref="T:Microsoft.Maps.Unity.ElevationTile" /> that is not present. This is equivalent to returning a task result from null.
            It is more efficient to use this however as the return value is cached in order to reduce GC allocations.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.ElevationTile.TileId">
      <summary>
            The <see cref="P:Microsoft.Maps.Unity.ElevationTile.TileId" /> which defines the extents of this tile.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.ElevationTile.LevelOfDetail">
      <summary>
            The level of detail corresponding to the <see cref="P:Microsoft.Maps.Unity.ElevationTile.TileId" />.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.ElevationTile.Width">
      <summary>
            The width of the tile, i.e. number of elevation samples along lines of latitude.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.ElevationTile.Height">
      <summary>
            The width of the tile, i.e. number of elevation samples along lines of longitude.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.ElevationTileLayer">
      <summary>
            The ElevationTileLayer provides elevation data spatially organized in Mercator tiles (EPSG:3857). The elevation data is used by the
            <see cref="T:Microsoft.Maps.Unity.MapRendererBase" /> to display 3D terrain.
            </summary>
      <remarks>
            The tile data is retrieved asynchronously and depending on the implementation may be requested from servers, loaded from disk,
            or generated on the fly.
            </remarks>
    </member>
    <member name="M:Microsoft.Maps.Unity.ElevationTileLayer.HasElevationTile(Microsoft.Geospatial.TileId,System.Threading.CancellationToken)">
      <summary>
            Returns a bool for the specified <see cref="T:Microsoft.Geospatial.TileId" /> for the avaliability of the data.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ElevationTileLayer.GetElevationTileData(Microsoft.Geospatial.TileId,System.Threading.CancellationToken)">
      <summary>
            Gets the data for the specified <see cref="T:Microsoft.Geospatial.TileId" />. Data is organized as a NxN array of floats. Each float represents
            an elevation value, or altitude, in meters relative to the WGS84 ellipsoid. The array is organized as row-major, with origin
            at the north-west corner of the tile.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ElevationTileLayer.OnInitializeTileLayer(Microsoft.Maps.Unity.MapRendererBase)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.ElevationTileLayer.OnDestroyTileLayer(Microsoft.Maps.Unity.MapRendererBase)">
      <inheritdoc />
    </member>
    <member name="T:Microsoft.Maps.Unity.ElevationTileLayerList">
      <summary>
            A serlizable list of <see cref="T:Microsoft.Maps.Unity.ElevationTileLayer" />s.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapImageryStyle">
      <summary>
            The style to apply to the imagery. This does not apply to <see cref="F:Microsoft.Maps.Unity.MapImageryType.Aerial" />.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapImageryStyle.Light">
      <summary>
            The default symbolic imagery style.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapImageryStyle.Dark">
      <summary>
            A dark version of the default <see cref="F:Microsoft.Maps.Unity.MapImageryStyle.Light" /> style.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapImageryStyle.CanvasLight">
      <summary>
            A simplified version of the map which also has some of the details such as hill shading disabled.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapImageryStyle.CanvasDark">
      <summary>
            A dark version of the <see cref="F:Microsoft.Maps.Unity.MapImageryStyle.CanvasLight" /> style.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapImageryStyle.CanvasGray">
      <summary>
            A grayscale version of the <see cref="F:Microsoft.Maps.Unity.MapImageryStyle.CanvasLight" /> style.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapImageryStyle.HighContrastLight">
      <summary>
            A high contrast style.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapImageryStyle.HighContrastDark">
      <summary>
            A dark version of the <see cref="F:Microsoft.Maps.Unity.MapImageryStyle.HighContrastLight" /> style.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapImageryStyle.Vibrant">
      <summary>
            The vibrant style.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapImageryType">
      <summary>
            The type of imagery to use for the <see cref="T:Microsoft.Maps.Unity.DefaultTextureTileLayer" />.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapImageryType.Symbolic">
      <summary>
            Symbolic imagery.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapImageryType.Aerial">
      <summary>
            Aerial imagery.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.TextureTile">
      <summary>
            A <see cref="T:Microsoft.Maps.Unity.TextureTile" /> contains the data used to render a given tile in a <see cref="T:Microsoft.Maps.Unity.TextureTileLayer" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTile.op_Equality(Microsoft.Maps.Unity.TextureTile,Microsoft.Maps.Unity.TextureTile)">
      <summary>
            Checks if one TextureTile is equals the other.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTile.op_Inequality(Microsoft.Maps.Unity.TextureTile,Microsoft.Maps.Unity.TextureTile)">
      <summary>
            Checks if one TextureTile is not equal to the other.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTile.Equals(Microsoft.Maps.Unity.TextureTile)">
      <summary>
            Check if 2 TextureTiles contains the same underlying data.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTile.Equals(System.Object)">
      <summary>
            Check if 2 TextureTiles contains the same underlying data.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTile.GetHashCode">
      <summary>
            Returns the hash code the this TextureTile.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTile.ToString">
      <summary>
            Returns the default ToString() method of this TextureTile
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTile.FromUrl(System.Uri)">
      <summary>
            Creates a <see cref="T:Microsoft.Maps.Unity.TextureTile" /> from a <see cref="T:System.Uri" /> referencing a PNG or JPEG image.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTile.FromImageData(System.Byte[])">
      <summary>
            Creates a <see cref="T:Microsoft.Maps.Unity.TextureTile" /> from PNG or JPEG byte data, or any other data type consumable by
            <see cref="M:UnityEngine.ImageConversion.LoadImage(UnityEngine.Texture2D,System.Byte[])" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTile.FromRawData(UnityEngine.TextureFormat,System.Int32,System.Int32,System.Byte[],System.Boolean)">
      <summary>
            Creates a <see cref="T:Microsoft.Maps.Unity.TextureTile" /> from raw texture data directly consumable by the GPU.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTile.FromTexture2D(UnityEngine.Texture2D)">
      <summary>
            Creates a <see cref="T:Microsoft.Maps.Unity.TextureTile" /> from a <see cref="T:UnityEngine.Texture2D" />. No conversion is needed here,
            and the <see cref="T:Microsoft.Maps.Unity.TextureTile" /> will use the specified <see cref="T:UnityEngine.Texture2D" /> directly.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTile.FromNull">
      <summary>
            Used for a <see cref="T:Microsoft.Maps.Unity.TextureTile" /> that is not present. This is equivalent to returning a nullable type with no value.
            It is more efficient to use this however as the return value is cached in order to reduce GC allocation.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.TextureTileLayer">
      <summary>
            The TextureTileLayer provides texture data spatially organized in Mercator tiles (EPSG:3857). The textures are used by the
            <see cref="T:Microsoft.Maps.Unity.MapRendererBase" /> for display and can be composited with other <see cref="T:Microsoft.Maps.Unity.TextureTileLayer" />s.
            </summary>
      <remarks>
            The tile data is retrieved asynchronously and depending on the implementation may be requested from servers, loaded from disk,
            or generated on the fly.
            </remarks>
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTileLayer.GetTexture(Microsoft.Geospatial.TileId,System.Threading.CancellationToken)">
      <summary>
            Retrieves the texture data that will be rendered for the specified <see cref="T:Microsoft.Geospatial.TileId" />.
            </summary>
      <returns>An array of bytes that must be decodable by <see cref="M:UnityEngine.ImageConversion.LoadImage(UnityEngine.Texture2D,System.Byte[])" />.</returns>
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTileLayer.OnInitializeTileLayer(Microsoft.Maps.Unity.MapRendererBase)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.TextureTileLayer.OnDestroyTileLayer(Microsoft.Maps.Unity.MapRendererBase)">
      <inheritdoc />
    </member>
    <member name="T:Microsoft.Maps.Unity.TextureTileLayerList">
      <summary>
            A serializable list of <see cref="T:Microsoft.Maps.Unity.TextureTileLayer" />s.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.TileLayer">
      <summary>
            Common base class for <see cref="T:Microsoft.Maps.Unity.TileLayer" />s. These are specially handled components that must be associated
            with a <see cref="T:Microsoft.Maps.Unity.MapRendererBase" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TileLayer.SetDirty">
      <summary>
            Marks the <see cref="T:Microsoft.Maps.Unity.TileLayer" /> as dirty to trigger a refresh of the <see cref="T:Microsoft.Maps.Unity.TileLayer" />'s data.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TileLayer.Awake">
      <summary>
            Initializes the <see cref="T:Microsoft.Maps.Unity.TileLayer" /> and adds it to the corresponding
            <see cref="T:Microsoft.Maps.Unity.MapRendererBase" />'s <see cref="T:Microsoft.Maps.Unity.TileLayerList`1" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TileLayer.Reset">
      <summary>
            Initializes the <see cref="T:Microsoft.Maps.Unity.TileLayer" /> and adds it to the corresponding
            <see cref="T:Microsoft.Maps.Unity.MapRendererBase" />'s <see cref="T:Microsoft.Maps.Unity.TileLayerList`1" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TileLayer.OnEnable">
      <summary>
            Initializes the <see cref="T:Microsoft.Maps.Unity.TileLayer" /> and adds it to the corresponding
            <see cref="T:Microsoft.Maps.Unity.MapRendererBase" />'s <see cref="T:Microsoft.Maps.Unity.TileLayerList`1" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TileLayer.OnDisable">
      <summary>
            Clears the inspector hide flag.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TileLayer.OnDestroy">
      <summary>
            Destroys the <see cref="T:Microsoft.Maps.Unity.TileLayer" /> and removes it from the corresponding
            <see cref="T:Microsoft.Maps.Unity.MapRendererBase" />'s <see cref="T:Microsoft.Maps.Unity.TileLayerList`1" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TileLayer.OnInitializeTileLayer(Microsoft.Maps.Unity.MapRendererBase)">
      <summary>
            Initializes the <see cref="T:Microsoft.Maps.Unity.TileLayer" /> and adds it to the corresponding <see cref="T:Microsoft.Maps.Unity.MapRendererBase" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TileLayer.OnDestroyTileLayer(Microsoft.Maps.Unity.MapRendererBase)">
      <summary>
            Destroys the <see cref="T:Microsoft.Maps.Unity.TileLayer" /> and removes it from the corresponding <see cref="T:Microsoft.Maps.Unity.MapRendererBase" />.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.TileLayerList`1">
      <summary>
            A read-only list of <see cref="T:Microsoft.Maps.Unity.TileLayer" />s associated with the <see cref="T:Microsoft.Maps.Unity.MapRendererBase" />. This list maintains a specific
            ordering of <see cref="T:Microsoft.Maps.Unity.TileLayer" />s which reflects their priority. Because <see cref="T:Microsoft.Maps.Unity.TileLayer" />s are
            <see cref="T:UnityEngine.MonoBehaviour" />s, their lifetime is managed through Unity (not this list).
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TileLayerList`1.Contains(`0)">
      <summary>
            Determines whether this list contains a specific value.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TileLayerList`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in this list.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.TileLayerList`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.TileLayerList`1.Count">
      <summary>
            Gets the number of items in the list.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.TileLayerList`1.Item(System.Int32)">
      <summary>
            Gets or sets the item at the specified index.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.Intersection">
      <summary>
            Helpers to do intersection tests.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.Intersection.IntersectRayTriangle(UnityEngine.Ray@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,System.Single@)">
      <summary>
            Intersects a ray and a triangle.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.Intersection.IntersectLinePlane(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,System.Single@)">
      <summary>
            Intersects a line and a plane.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.Intersection.IntersectRayCylinder(System.Single,System.Single,UnityEngine.Ray,System.Single@,System.Boolean@)">
      <summary>
            Intersects a ray and a cylinder that sits on origin.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.Intersection.IntersectSquareCircle(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Single)">
      <summary>
            Test for intersection between a square AABB and a circle.
            </summary>
      <returns>Whether the square is in the circle, intersecting it, or outside of it.</returns>
    </member>
    <member name="T:Microsoft.Maps.Unity.IntersectionType">
      <summary>
            This enum can be used to determine if primitives partially overlap.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.IntersectionType.None">
      <summary>
            Does not intersect at all.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.IntersectionType.Overlaps">
      <summary>
            There is a partial overlap of the primitives.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.IntersectionType.Inside">
      <summary>
            One primitive is contained completely within or inside the other.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.LatLonWrapper">
      <summary>
            Serializable wrapper class for a <see cref="T:Microsoft.Geospatial.LatLon" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.LatLonWrapper.#ctor(Microsoft.Geospatial.LatLon)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.Unity.LatLonWrapper" />.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.LatLonWrapper.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.Unity.LatLonWrapper" /> class.
            </summary>
      <param name="latitude">The latitude in degrees.</param>
      <param name="longitude">The longitude in degrees.</param>
    </member>
    <member name="M:Microsoft.Maps.Unity.LatLonWrapper.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.LatLonWrapper.Equals(Microsoft.Maps.Unity.LatLonWrapper)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.LatLonWrapper.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.LatLonWrapper.ToLatLon">
      <summary>
            Converts to a LatLon. Wraps longitude so that values always are between -180 and +180.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.LatLonWrapper.ToString">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.LatLonWrapper.op_Equality(Microsoft.Maps.Unity.LatLonWrapper,Microsoft.Maps.Unity.LatLonWrapper)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.LatLonWrapper.op_Inequality(Microsoft.Maps.Unity.LatLonWrapper,Microsoft.Maps.Unity.LatLonWrapper)">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Maps.Unity.LatLonWrapper.Latitude">
      <summary>
            The latitude in degrees.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.LatLonWrapper.Longitude">
      <summary>
            The longitude in degrees.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapConstants">
      <summary>
            Map constant values.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapConstants.MinimumZoomLevel">
      <summary>
            Lowest zoom level for the map.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapConstants.MaximumZoomLevel">
      <summary>
            Highest zoom level for the map.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.ObservableList`1">
      <summary>
            A list implementation with notifications for add and remove.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.ObservableList`1.ItemChangedEventHandler">
      <summary>
            Represents the method that handles an event raised to indicate a change in the list to a specific item.
            </summary>
      <param name="sender">List that owns the change</param>
      <param name="item">Item that changed</param>
      <param name="index">Index of the item that changed.</param>
    </member>
    <member name="T:Microsoft.Maps.Unity.ObservableList`1.RangeChangedEventHandler">
      <summary>
            Represents the method that handles an event raised to indicate a change in the list to a range of items.
            </summary>
      <param name="sender">List that owns the change</param>
      <param name="items">Items that changed</param>
      <param name="index">Index of the start of the range of items.</param>
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.Add(`0)">
      <summary>
            Adds an item to this list.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds a range of items to this list.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.Clear">
      <summary>
            Removes all items from this list.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.Contains(`0)">
      <summary>
            Determines whether this list contains a specific value.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of this list to an Array, starting at a particular Array index.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in this list.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.Insert(System.Int32,`0)">
      <summary>
            Inserts an item to this list at the specified index.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from this list.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.ObservableList`1.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.ObservableList`1.Count">
      <summary>
            Gets the number of elements in the list.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.ObservableList`1.IsReadOnly">
      <summary>
            Gets a value indicating whether the ObservableList is readonly.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.AltitudeReference">
      <summary>
            The altitude reference system to be used in defining a geographic shape.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.AltitudeReference.Ellipsoid">
      <summary>
            The altitude reference is based on an ellipsoid which is a mathematical approximation of the shape of the Earth.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.AltitudeReference.Terrain">
      <summary>
            The altitude reference is based on distance above terrain or ground level.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.AltitudeReference.Surface">
      <summary>
            The altitude reference is based on the distance above the tallest surface structures, such as buildings, trees, roads,
            etc., above terrain or ground level.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.GeoBoundingBox">
      <summary>
            Defines a rectangular area in Latitude and Longitude coordinates.
            </summary>
      <remarks>
            The direction that the GeoBoundingBox wraps longitudinally is determined by the longitude of the left and right points. If the
            BottomLeft longitude is greater than the TopRight longitude, the GeoBoundingBox wraps across the anti-meridian.
            </remarks>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.#ctor(Microsoft.Geospatial.LatLon,Microsoft.Geospatial.LatLon)">
      <summary>
            Constructs a GeoBoundingBox from the bottom left and top right locations.
            </summary>
      <param name="bottomLeft">The bottom left coordinate of the bounding GeoBoundingBox</param>
      <param name="topRight">The top right coordinate of the bounding GeoBoundingBox</param>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.Intersects(Microsoft.Geospatial.LatLon)">
      <summary>
            Returns true if the specified location is in this GeoBoundingBox or intersects the edge of this GeoBoundingBox.
            </summary>
      <summary>
            Returns true if the specified location is in this GeoBoundingCube or intersects the edge of this GeoBoundingCube.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.Intersects(Microsoft.Geospatial.GeoBoundingBox)">
      <summary>
            Returns true if the specified GeoBoundingBox intersects this GeoBoundingBox. This is an inclusive check.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.Overlaps(System.Collections.Generic.IList{Microsoft.Geospatial.LatLon})">
      <summary>
            Tests whether this bounding box overlaps the provided polygon.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.Overlaps(Microsoft.Geospatial.LatLon,Microsoft.Geospatial.LatLon)">
      <summary>
            Does the box intersect with the line segment specified by the two end points.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.ToMercatorBoundingBox">
      <summary>
            Returns the <see cref="T:Microsoft.Geospatial.MercatorBoundingBox" /> for this <see cref="T:Microsoft.Geospatial.GeoBoundingBox" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.ToString">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.Equals(Microsoft.Geospatial.GeoBoundingBox)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.op_Equality(Microsoft.Geospatial.GeoBoundingBox,Microsoft.Geospatial.GeoBoundingBox)">
      <summary>
            Comapres for equality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.op_Inequality(Microsoft.Geospatial.GeoBoundingBox,Microsoft.Geospatial.GeoBoundingBox)">
      <summary>
            Comapres for inequality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Geospatial.GeoBoundingBox.BottomLeft">
      <summary>
            The minimum coordinate for the GeoBoundingBox.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.GeoBoundingBox.TopRight">
      <summary>
            The maximum coordinate for the GeoBoundingBox.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.GeoBoundingBox.Center">
      <summary>
            The center of the GeoBoundingBox.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.GeoBoundingBox.Corners">
      <summary>
            Enumerates each of the corners in this box.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.GeoBoundingBoxBuilder">
      <summary>
            Encapsulates logic for building a <see cref="T:Microsoft.Geospatial.GeoBoundingBoxBuilder" /> instance.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBoxBuilder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.GeoBoundingBoxBuilder" /> class that is empty.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBoxBuilder.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Geospatial.LatLon})">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.GeoBoundingBoxBuilder" /> class, starting with a set of points.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBoxBuilder.#ctor(Microsoft.Geospatial.GeoBoundingBox)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.GeoBoundingBoxBuilder" /> class, starting with a box.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBoxBuilder.Grow(Microsoft.Geospatial.LatLon)">
      <summary>
            Creates the box or increases it to encompass the specified point.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBoxBuilder.Grow(System.Double,System.Double)">
      <summary>
            Creates the box or increases it to encompass the specified point.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBoxBuilder.Grow(System.Single,System.Single)">
      <summary>
            Creates the box or increases it to encompass the specified point.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBoxBuilder.Grow(System.Collections.Generic.IEnumerable{Microsoft.Geospatial.LatLon})">
      <summary>
            Creates the box or increases it to encompass the specified points.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBoxBuilder.Grow(Microsoft.Geospatial.GeoBoundingBox)">
      <summary>
            Creates the box or increases it to encompass the specified box.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBoxBuilder.ToGeoBoundingBox">
      <summary>
            Gets an immutable box from the builder.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.GeoBoundingBoxBuilder.IsEmpty">
      <summary>
            Gets whether or not the box has grown to include anything.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.IBinarySerializable">
      <summary>
            Interface to read/write types from/to binaries.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.IBinarySerializable.Write(System.IO.BinaryWriter)">
      <summary>
            Types that get serialized to blob must implement this method to commit their contents
            to binary storage.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.IBinarySerializable.Read(System.IO.BinaryReader)">
      <summary>
            Types that get serialized to blob implement this method to hydrate their contents
            from binary storage.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.LatLon">
      <summary>
            Represents Latitude + Longitude.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.MinimumLatitude">
      <summary>
            The minimum valid latitude.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.MaximumLatitude">
      <summary>
            The maximum valid latitude.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.MinimumLongitude">
      <summary>
            The minimum valid longitude.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.MaximumLongitude">
      <summary>
            The maximum valid longitude.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.MinValue">
      <summary>
            A Coordinate2D with minimum values for X and Y.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.MaxValue">
      <summary>
            A Coordinate2D with maximum values for X and Y.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.SizeInBytes">
      <summary>
            Size of this struct.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.Origin">
      <summary>
            The origin coordinate, (0, 0).
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.LatLon" /> struct.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.FromRadians(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.LatLon" /> struct from radians.
            </summary>
      <param name="latitudeInRadians">Latitude expressed in radians.</param>
      <param name="longitudeInRadians">Longitude expressed in radians.</param>
      <returns>A new LatLon instance</returns>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.WrapLongitude(System.Double)">
      <summary>
            Wraps a longitudinal value in degrees to the -180 to 180 range.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.IsOnTheEdgeOfTheWorld">
      <summary>
            Check if a vertex lies on the edge of the world, from -180 to 180 longitude, and from -90 to 90 latitude
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.Overlaps(System.Collections.Generic.IList{Microsoft.Geospatial.LatLon})">
      <summary>
            Determines if the point is inside or outside the ring. Uses the crossing count algorithm
            to count the number of times a horizontal ray from the point 
            crosses the ring. It is assumed that though the ring is closed, it does not duplicate
            the first vertex.
            </summary>
      <remarks>
            Based on PNPOLY.  See licenses.
            </remarks>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.op_Equality(Microsoft.Geospatial.LatLon,Microsoft.Geospatial.LatLon)">
      <summary>
            Comapres the LatLons for equality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.op_Inequality(Microsoft.Geospatial.LatLon,Microsoft.Geospatial.LatLon)">
      <summary>
            Comapres the LatLons for inequality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.Equals(Microsoft.Geospatial.LatLon)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.Equals(Microsoft.Geospatial.LatLon@)">
      <summary>
            Returns true if the specified LatLon equals this LatLon.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.ApproximatelyEquals(Microsoft.Geospatial.LatLon,System.Double)">
      <summary>
            Determines whether two LatLon coordinates are considered equal based on a precision threshold.
            https://msdn.microsoft.com/en-us/library/ya2zha7s(v=vs.110).aspx
            The default tolerance is set to 9 decimal places where the precision is approximately equal to
            110 microns, since 10 decimal places or more indicates a computer or calculator was used.
            In our applications, it's likely to have come from calls to SQL MakeValid().
            </summary>
      <returns>True if the coordinates are considered equal, false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.ToString">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.Write(System.IO.BinaryWriter)">
      <summary>
            Commit their contents to binary storage.
            </summary>
      <param name="writer">The writer to which it writes the content</param>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.Read(System.IO.BinaryReader)">
      <summary>
            Hydrate the contents from binary storage. Expected order of data is Longitude, Latitude.
            </summary>
      <param name="reader">The reader from which it reads the content</param>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.ToMercatorCoordinate">
      <summary>
            Returns the <see cref="T:Microsoft.Geospatial.MercatorCoordinate" /> from this <see cref="T:Microsoft.Geospatial.LatLon" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.Wgs84LatitudeToMercator(System.Double)">
      <summary>
            Converts from WGS 84 latitudes in radians (-PI/2...PI/2) to Mercator unit latitude value (-0.5...0.5).
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLon.IsValid">
      <summary>
            Returns true if the specified coordinate is valid.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLon.LongitudeInDegrees">
      <summary>
            The longitude in degrees.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLon.LatitudeInDegrees">
      <summary>
            The latitude in degrees.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLon.LongitudeInRadians">
      <summary>
            Gets the latitude value, converted to radians.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLon.LatitudeInRadians">
      <summary>
            Gets the longitude value, converted to radians.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.LatLonAlt">
      <summary>
            A latitude, longitude, and altitude.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Constructs a LatLonAlt.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.#ctor(Microsoft.Geospatial.LatLon@,System.Double)">
      <summary>
            Constructs a LatLonAlt.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.#ctor(Microsoft.Geospatial.LatLon,System.Double)">
      <summary>
            Constructs a LatLonAlt.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.Equals(Microsoft.Geospatial.LatLonAlt)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.op_Equality(Microsoft.Geospatial.LatLonAlt,Microsoft.Geospatial.LatLonAlt)">
      <summary>
            Compares the LatLonAlts for equality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.op_Inequality(Microsoft.Geospatial.LatLonAlt,Microsoft.Geospatial.LatLonAlt)">
      <summary>
            Compares the LatLonAlts for inequality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.ToString">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Geospatial.LatLonAlt.LatLon">
      <summary>
            Degrees, YX
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLonAlt.AltitudeInMeters">
      <summary>
            Meters, Z. This is always relative to WGS84 Datum.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLonAlt.LatitudeInDegrees">
      <summary>
            The latitude in degrees.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLonAlt.LongitudeInDegrees">
      <summary>
            The longitude in degrees.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.MercatorBoundingBox">
      <summary>
            Defines a rectangular area in Mercator space.
            <br /><br />
            In Mercator space, X coordinates are longitudinal values and Y coordinates are latitudinal values.
            <br /><br />
            The direction that the MercatorBoundingBox wraps longitudinally is determined by the X cordinate of the left and right points.
            If the BottomLeft X coordinate is greater than the TopRight X coordinate, the MercatorBoundingBox wraps across the anti-meridian.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.#ctor(Microsoft.Geospatial.MercatorCoordinate,Microsoft.Geospatial.MercatorCoordinate)">
      <summary>
            Constructs a MercatorBoundingBox from a bottom left and top right coordinate.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.Intersects(Microsoft.Geospatial.LatLon)">
      <summary>
            Returns true if the <see cref="T:Microsoft.Geospatial.LatLon" /> intersects the <see cref="T:Microsoft.Geospatial.MercatorBoundingBox" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.Intersects(Microsoft.Geospatial.MercatorCoordinate)">
      <summary>
            Returns true if the <see cref="T:Microsoft.Geospatial.MercatorCoordinate" /> intersects this <see cref="T:Microsoft.Geospatial.MercatorBoundingBox" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.Intersects(Microsoft.Geospatial.MercatorBoundingBox)">
      <summary>
            Returns true if this <see cref="T:Microsoft.Geospatial.MercatorBoundingBox" /> intersects the other <see cref="T:Microsoft.Geospatial.MercatorBoundingBox" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.Contains(Microsoft.Geospatial.MercatorBoundingBox)">
      <summary>
            Returns true if the specified <see cref="T:Microsoft.Geospatial.MercatorBoundingBox" /> is completely contained within this box.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.ToString">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.ToGeoBoundingBox">
      <summary>
            Converts this MercatorBoundingBox to a lat-lon Box.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.Equals(Microsoft.Geospatial.MercatorBoundingBox)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.op_Equality(Microsoft.Geospatial.MercatorBoundingBox,Microsoft.Geospatial.MercatorBoundingBox)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.op_Inequality(Microsoft.Geospatial.MercatorBoundingBox,Microsoft.Geospatial.MercatorBoundingBox)">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Geospatial.MercatorBoundingBox.BottomLeft">
      <summary>
            The bottom left coordinate of the bounding box.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.MercatorBoundingBox.TopRight">
      <summary>
            The top right coordinate of the bounding box.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.MercatorBoundingBox.Center">
      <summary>
            The center of the box.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.MercatorBoundingCircle">
      <summary>
            Defines a circle in Mercator space.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingCircle.#ctor(Microsoft.Geospatial.MercatorCoordinate,System.Double)">
      <summary>
            Constructs a <see cref="T:Microsoft.Geospatial.MercatorBoundingCircle" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingCircle.Intersects(Microsoft.Geospatial.LatLon)">
      <summary>
            Returns true if the <see cref="T:Microsoft.Geospatial.LatLon" /> intersects the circle. Handles anti-meridian wrapping.
            </summary>
      <remarks>
            This method internally converts a <see cref="T:Microsoft.Geospatial.LatLon" /> to a <see cref="T:Microsoft.Geospatial.MercatorCoordinate" />. If possible,
            it is more efficient to test intersection with a <see cref="T:Microsoft.Geospatial.MercatorCoordinate" /> directly.
            </remarks>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingCircle.Intersects(Microsoft.Geospatial.MercatorCoordinate)">
      <summary>
            Returns true if the <see cref="T:Microsoft.Geospatial.MercatorCoordinate" /> intersects the circle. Handles anti-meridian wrapping.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingCircle.Contains(Microsoft.Geospatial.MercatorBoundingBox)">
      <summary>
            Returns true if the <see cref="T:Microsoft.Geospatial.MercatorBoundingBox" /> is completely contained within this <see cref="T:Microsoft.Geospatial.MercatorBoundingCircle" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingCircle.Intersects(Microsoft.Geospatial.MercatorBoundingBox)">
      <summary>
            Returns true if the <see cref="T:Microsoft.Geospatial.MercatorBoundingBox" /> intersects the circle.
            Does not handle the case where <see cref="T:Microsoft.Geospatial.MercatorBoundingBox" /> crosses anti-meridian.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingCircle.Equals(Microsoft.Geospatial.MercatorBoundingCircle)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingCircle.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingCircle.ToString">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingCircle.op_Equality(Microsoft.Geospatial.MercatorBoundingCircle,Microsoft.Geospatial.MercatorBoundingCircle)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingCircle.op_Inequality(Microsoft.Geospatial.MercatorBoundingCircle,Microsoft.Geospatial.MercatorBoundingCircle)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingCircle.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Geospatial.MercatorBoundingCircle.Center">
      <summary>
            The center of the circle in Mercator space.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.MercatorBoundingCircle.Radius">
      <summary>
            The radius of the circle in Mercator space.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.MercatorCoordinate">
      <summary>
            Represents a coordinate in the Mercator system (EPSG:3857). The latitude and longitude values range from -0.5 to +0.5.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.MercatorCoordinate.MinimumLatitudeInDegrees">
      <summary>
            Minimum valid latitude of the Mercator projection in degrees.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.MercatorCoordinate.MaximumLatitudeInDegrees">
      <summary>
            Minimum valid latitude of the Mercator projection in degrees.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.MercatorCoordinate.MinimumLatitudeInRadians">
      <summary>
            Minimum valid latitude of the Mercator projection in radians.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.MercatorCoordinate.MaximumLatitudeInRadians">
      <summary>
            Maximum valid latitude of the Mercator projection in radians.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.MercatorCoordinate.Origin">
      <summary>
            The origin coordinate, (0, 0).
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.MercatorCoordinate" /> struct.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.ToLatLon">
      <summary>
            Creates a <see cref="T:Microsoft.Geospatial.LatLon" /> from this <see cref="T:Microsoft.Geospatial.MercatorCoordinate" /></summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.Equals(Microsoft.Geospatial.MercatorCoordinate)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.ToString">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.op_Equality(Microsoft.Geospatial.MercatorCoordinate,Microsoft.Geospatial.MercatorCoordinate)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.op_Inequality(Microsoft.Geospatial.MercatorCoordinate,Microsoft.Geospatial.MercatorCoordinate)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.Wrap">
      <summary>
            Wraps the longitudinal value of the Mercator coordinate if it extends outside the range of [-0.5, 0.5].
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.op_Addition(Microsoft.Geospatial.MercatorCoordinate,Microsoft.Geospatial.MercatorCoordinate)">
      <summary>
            Adds two <see cref="T:Microsoft.Geospatial.MercatorCoordinate" />s. Does not <see cref="M:Microsoft.Geospatial.MercatorCoordinate.Wrap" /> the result.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.op_Subtraction(Microsoft.Geospatial.MercatorCoordinate,Microsoft.Geospatial.MercatorCoordinate)">
      <summary>
            Subtracts a <see cref="T:Microsoft.Geospatial.MercatorCoordinate" /> from another <see cref="T:Microsoft.Geospatial.MercatorCoordinate" />.
            Does not <see cref="M:Microsoft.Geospatial.MercatorCoordinate.Wrap" /> the result.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.op_UnaryNegation(Microsoft.Geospatial.MercatorCoordinate)">
      <summary>
            Negates a <see cref="T:Microsoft.Geospatial.MercatorCoordinate" /> from another <see cref="T:Microsoft.Geospatial.MercatorCoordinate" />.
            Does not <see cref="M:Microsoft.Geospatial.MercatorCoordinate.Wrap" /> the result.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.op_Multiply(Microsoft.Geospatial.MercatorCoordinate,System.Double)">
      <summary>
            Multiplies a <see cref="T:Microsoft.Geospatial.MercatorCoordinate" /> by a scalar. Does not <see cref="M:Microsoft.Geospatial.MercatorCoordinate.Wrap" /> the result.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.op_Multiply(System.Double,Microsoft.Geospatial.MercatorCoordinate)">
      <summary>
            Multiplies a <see cref="T:Microsoft.Geospatial.MercatorCoordinate" /> by a scalar. Does not <see cref="M:Microsoft.Geospatial.MercatorCoordinate.Wrap" /> the result.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.op_Division(Microsoft.Geospatial.MercatorCoordinate,System.Double)">
      <summary>
            Divides a <see cref="T:Microsoft.Geospatial.MercatorCoordinate" /> by a scalar. Does not <see cref="M:Microsoft.Geospatial.MercatorCoordinate.Wrap" /> the result.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.WrapLongitude(System.Double)">
      <summary>
            Wraps a longitudinal value in Mercator space to the -0.5 to 0.5 range.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.MercatorToWgs84LatitudeInRadians(System.Double)">
      <summary>
            Converts from Mercator unit latitude value (-0.5...0.5) to WGS 84 latitudes in radians (-PI/2...PI/2).
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.Distance(Microsoft.Geospatial.MercatorCoordinate,Microsoft.Geospatial.MercatorCoordinate)">
      <summary>
            The squared distance in Mercator space between the specified coordinates. Does not take into account longitude wrapping.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorCoordinate.DistanceSq(Microsoft.Geospatial.MercatorCoordinate,Microsoft.Geospatial.MercatorCoordinate)">
      <summary>
            The distance in Mercator space between the specified coordinates. Does not take into account longitude wrapping.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.MercatorCoordinate.X">
      <summary>
            The longitude in Mercator space where -0.5 represents -180 degrees, 0 is the prime meridian, and +0.5 represents to 180 degrees.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.MercatorCoordinate.Y">
      <summary>
            The latitude in Mercator space. Valid range from -0.5 to 0.5, corresponding to <see cref="F:Microsoft.Geospatial.MercatorCoordinate.MinimumLatitudeInDegrees" /> and
            <see cref="F:Microsoft.Geospatial.MercatorCoordinate.MaximumLatitudeInDegrees" />.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.MercatorScale">
      <summary>
            Various helper methods used to compute the scaling factor of the Mercator projection, i.e. the amount of distortion.
            This varies based on the latitude of the coordinate. The scale of the distortion increases away from the equator and
            is exterme towards the poles. At <see cref="F:Microsoft.Geospatial.MercatorCoordinate.MaximumLatitudeInDegrees" />, the distortion is around 11x.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorScale.AtMercatorLatitude(System.Double)">
      <summary>
            Calculates the Mercator scaling factor at the specified latitude in Mercator space.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorScale.AtLatitudeInRadians(System.Double)">
      <summary>
            Calculates the Mercator scaling factor at the specified latitude in radians.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorScale.AtLatitudeInDegrees(System.Double)">
      <summary>
            Calculates the Mercator scaling factor at the specified latitude in degrees.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorScale.AtMercatorCoordinate(Microsoft.Geospatial.MercatorCoordinate)">
      <summary>
            Calculates the Mercator scaling factor at the specified <see cref="T:Microsoft.Geospatial.MercatorCoordinate" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorScale.AtLatLon(Microsoft.Geospatial.LatLon)">
      <summary>
            Calculates the Mercator scaling factor at the specified <see cref="T:Microsoft.Geospatial.LatLon" />.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.TileBorders">
      <summary>
            Flags enumeration identifying the borders of a tile.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileBorders.None">
      <summary>
            No borders
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileBorders.East">
      <summary>
            Eastern (right) border
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileBorders.West">
      <summary>
            Western (left) border
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileBorders.North">
      <summary>
            Northern (top) border
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileBorders.South">
      <summary>
            Southern (bottom) border
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.TileId">
      <summary>
             Encompasses a single Tile Id
            
             At level of detail 0, there is one tile with a value of 1 ("").
             At level of detail 1, there are four tiles with values of 4 ("0"), 5 ("1"), 6 ("2"), 7 ("3").
             At level of detail 2, there are sixteen tiles with value starting at 16 ("00").
             </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileId.Null">
      <summary>
            The null tile id.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TileId" /> struct with
            a value.
            </summary>
      <param name="value">Value of the Tile Id.</param>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.#ctor(Microsoft.Geospatial.LatLon,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TileId" /> struct from a location.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.#ctor(Microsoft.Geospatial.MercatorCoordinate,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TileId" /> struct from a <see cref="T:Microsoft.Geospatial.MercatorCoordinate" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.Parse(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TileId" /> struct from a string tile key.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the provided key cannot be parsed.</exception>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.TryParse(System.String,Microsoft.Geospatial.TileId@)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TileId" /> struct from a string tile key.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.FromKey(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TileId" /> struct from a string tile key.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.ToKey">
      <summary>
            Gets the tile id as a string grid quadkey.  This can be passed into <see cref="M:Microsoft.Geospatial.TileId.Parse(System.String)" /> and <see cref="M:Microsoft.Geospatial.TileId.TryParse(System.String,Microsoft.Geospatial.TileId@)" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.GetWest">
      <summary>
            Calculates the <see cref="T:Microsoft.Geospatial.TileId" /> to the West of this one,
            wrapping around the earth.
            </summary>
      <returns>
        <see cref="T:Microsoft.Geospatial.TileId" /> to the West.</returns>
      <remarks>To navigate any direction, you walk through the pairs of
            bits and decrementing or incrementing until you get one that
            doesn't overflow.  What is actually happening is that you're
            decrementing or incrementing the X or Y offset of the TileId,
            which are bit interleaved.</remarks>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.GetEast">
      <summary>
            Calculates the <see cref="T:Microsoft.Geospatial.TileId" /> to the East of this one,
            wrapping around the earth.
            </summary>
      <returns>
        <see cref="T:Microsoft.Geospatial.TileId" /> to the East.</returns>
      <remarks>See CalculateWest for remarks.</remarks>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.GetNorth">
      <summary>
            Calculates the <see cref="T:Microsoft.Geospatial.TileId" /> to the North of this one.
            </summary>
      <returns>
        <see cref="T:Microsoft.Geospatial.TileId" /> to the North, or
            <see cref="F:Microsoft.Geospatial.TileId.Null" /> if this tile is on the top row.</returns>
      <remarks>See CalculateWest for remarks.</remarks>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.GetSouth">
      <summary>
            Calculates the <see cref="T:Microsoft.Geospatial.TileId" /> to the South of this one.
            </summary>
      <returns>
        <see cref="T:Microsoft.Geospatial.TileId" /> to the South, or
            <see cref="F:Microsoft.Geospatial.TileId.Null" /> if this tile is on the bottom row.
            </returns>
      <remarks>See CalculateWest for remarks.</remarks>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.GetParent">
      <summary>
            Calculate the id of the tile that is one level of detail up from
            this tile.
            This method will return <see cref="F:Microsoft.Geospatial.TileId.Null" /> if the
            this tile has no parents.
            </summary>
      <returns>Parent tile id.</returns>
      <remarks>Basically we just shift right 2 bits to get the parent.
            There are some exceptions though.</remarks>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.TryGetParent(Microsoft.Geospatial.TileId@)">
      <summary>
            Try to calculate the id of the tile that is one level of detail up
            from this tile.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.TryGetChildren(Microsoft.Geospatial.TileId[]@)">
      <summary>
            Calculate the four child tile ids of this tile id.
            </summary>
      <returns>False if this tile is at the maximum level of
            detail.</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.IsParentOf(Microsoft.Geospatial.TileId)">
      <summary>
            Returns whether or not the specified tile id is an immediate or
            distant child of this tile id.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.IsParentOf(System.Collections.Generic.IEnumerable{Microsoft.Geospatial.TileId})">
      <summary>
            Returns whether or not any of the specified tile ids are an
            immediate or distant child of this tile id.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.ToString">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.TileId.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.TileId.Equals(System.Object)">
      <summary>
            See <see cref="M:System.Object.Equals(System.Object)" />.
            </summary>
      <param name="obj">Object to compare to this one.</param>
      <returns>True if the object equals this one.</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.Equals(Microsoft.Geospatial.TileId)">
      <summary>
            Compares 2 TileIds
            </summary>
      <param name="other">The other TileId to compare to this one</param>
      <returns>True if they are the same</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.op_Equality(Microsoft.Geospatial.TileId,Microsoft.Geospatial.TileId)">
      <summary>
            Overloads the equality operator.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.op_Inequality(Microsoft.Geospatial.TileId,Microsoft.Geospatial.TileId)">
      <summary>
            Overloads the inequality operator.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.Write(System.IO.BinaryWriter)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.TileId.Read(System.IO.BinaryReader)">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Geospatial.TileId.Value">
      <summary>
            Gets or sets the value of this tile.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.TileLevelOfDetail">
      <summary>
            Encapsulates the value of a tile level-of-detail.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileLevelOfDetail.MinValue">
      <summary>
            The smallest Level of Detail that is supported by this class.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileLevelOfDetail.MaxValue">
      <summary>
            The largest Level of Detail that is supported by this class.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileLevelOfDetail.NullValue">
      <summary>
            Gets the level of detail value that is used to represent no level of detail.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileLevelOfDetail.Null">
      <summary>
            Gets a level of detail instance for no level of detail.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileLevelOfDetail.Max">
      <summary>
            Gets the maximum level of detail supported by the system.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileLevelOfDetail.Min">
      <summary>
            Gets the minimum level of detail supported by the system.
            This will be 0 as that is the minimum functional value even though -1 is used for null.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.#ctor(System.Int16)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TileLevelOfDetail" /> struct.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.FindHighestLowerThan(Microsoft.Geospatial.TileLevelOfDetail,System.Collections.Generic.HashSet{Microsoft.Geospatial.TileLevelOfDetail})">
      <summary>
            find the highest valid Lod that is lower than the given one
            </summary>
      <returns>highest valid Lod that is lower than the given one</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Explicit(Microsoft.Geospatial.TileLevelOfDetail)~System.Int16">
      <summary>
            Allows explicit casting of <see cref="T:Microsoft.Geospatial.TileLevelOfDetail" /> into
            <see cref="T:System.Int16" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Explicit(System.Int16)~Microsoft.Geospatial.TileLevelOfDetail">
      <summary>
            Allows explicit casting of <see cref="T:System.Int16" /> into
            <see cref="T:Microsoft.Geospatial.TileLevelOfDetail" />.  This causes validation code to be
            run.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.TryParse(System.String,Microsoft.Geospatial.TileLevelOfDetail@)">
      <summary>
            Parses the level of detail from the specified string.
            </summary>
      <returns>True if successful</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Addition(Microsoft.Geospatial.TileLevelOfDetail,System.Int16)">
      <summary>
            Adds the level of details.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Subtraction(Microsoft.Geospatial.TileLevelOfDetail,System.Int16)">
      <summary>
            Subtracts the level of details.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_GreaterThan(Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns true if the level of detail is greater than the other level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_LessThan(Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns true if the level of detail is less than the other level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_GreaterThanOrEqual(Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns true if the level of detail is greater than or equal to the other level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_LessThanOrEqual(Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns true if the level of detail is less than or equal to the other level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Increment(Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Increments the level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Decrement(Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Decrements the level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Equality(Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Overloads the equality operator.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Inequality(Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Overloads the inequality operator.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.Equals(Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Tests whether this value equals the other.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.Write(System.IO.BinaryWriter)">
      <summary>
            Writes this level of detail to the provided <see cref="T:System.IO.BinaryWriter" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.Read(System.IO.BinaryReader)">
      <summary>
            Populates this object with a value read in from the provided <see cref="T:System.IO.BinaryReader" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.ToString">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.CompareTo(Microsoft.Geospatial.TileLevelOfDetail)">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Geospatial.TileLevelOfDetail.Value">
      <summary>
            Gets or sets the value of this object.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.TileOperations">
      <summary>
            Common operations related to TilePosition and TileId. For more basic operations using the underlying primitive types,
            see PrimitiveTileOperations.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetCoveredTileIds(Microsoft.Geospatial.MercatorBoundingBox,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns an enumeration of TileIds that cover the specified MercatorBoundingBox at the given level of detail. The enumeration
            starts in the upper left tile and ends at the lower right tile.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetCoveredTileIds(Microsoft.Geospatial.GeoBoundingBox,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns an enumeration of TileIds that cover the specified GeoBoundingBox at the given level of detail. The enumeration starts
            in the upper left tile and ends at the lower right tile.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetCoveredTilePositions(Microsoft.Geospatial.MercatorBoundingBox,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns an enumeration of TilePositions that cover the specified MercatorBoundingBox at the given level of detail. The
            enumeration starts in the upper left tile and ends at the lower right tile.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.PopulateCoveredTilePositionsList(Microsoft.Geospatial.MercatorBoundingBox,Microsoft.Geospatial.TileLevelOfDetail,System.Collections.Generic.List{Microsoft.Geospatial.TilePosition})">
      <summary>
            Populates the tilePositionList passed in with a list of TilePositions that cover the specified MercatorBoundingBox at the given level of detail.
            The list starts in the upper left tile and ends at the lower right tile.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetCoveredTilePositions(Microsoft.Geospatial.GeoBoundingBox,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns an enumeration of TilePositions that cover the specified GeoBoundingBox at the given level of detail. The enumeration
            starts in the upper left tile and ends at the lower right tile.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetSubdomain(Microsoft.Geospatial.TileId)">
      <summary>
            Gets the subdomain of the tile, a value between 0 and 3. This id is relative to the parent tile. 0 is the first child, etc.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.CalculateCenter(Microsoft.Geospatial.TileId)">
      <summary>
            Calculates the center of the <see cref="T:Microsoft.Geospatial.TileId" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.CalculateBounds(Microsoft.Geospatial.TileId,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Calculates the bounding box for this tile id.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.CalculateGeoBoundingBox(Microsoft.Geospatial.TileId)">
      <summary>
            Calculates the bounding box for this tile id.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetRelativeOffsetScale(Microsoft.Geospatial.TileId,Microsoft.Geospatial.TileId,System.Single@,System.Single@,System.Single@)">
      <summary>
            Gets the normalized extent of this tile within the given parent tile.
            </summary>
      <param name="childTileId">The tile id of a child in the parent tile.</param>
      <param name="parentTile">A tile that contains this tile.</param>
      <param name="offsetScaleX">The X offset of this tile's upper left corner from the parent's upper left corner.</param>
      <param name="offsetScaleY">The Y offset of this tile's upper left corner from the parent's upper left corner.</param>
      <param name="childScale">The scale of this tile relative to the parent tile. e.g. If the parent is at LOD: 17, and he child is 19, it returns 0.25</param>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.ToGeoBoundingBox(Microsoft.Geospatial.TilePosition)">
      <summary>
            Converts the specified TilePosition to a Box.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.ToMercatorBoundingBox(Microsoft.Geospatial.TileId)">
      <summary>
            Converts the specified TileId to a MercatorBoundingBox.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.ToMercatorBoundingBox(Microsoft.Geospatial.TilePosition)">
      <summary>
            Converts the specified TilePosition to a MercatorBoundingBox.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.CalculateLevelOfDetail(Microsoft.Geospatial.TileId)">
      <summary>
            Calculates the TileLevelOfDetail for the TileId.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.CalculateTileBorders(Microsoft.Geospatial.TileId,Microsoft.Geospatial.LatLon)">
      <summary>
            Given a point, calculates if the point falls on a tile border or not.
            If the point is on a corner, then the point will fall into two sides.
            </summary>
      <param name="tileId">Tile id to test</param>
      <param name="point">point to test</param>
      <returns>Border bitmap if the point falls into border, none otherwise</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.CalculateTileBorders(Microsoft.Geospatial.GeoBoundingBox,Microsoft.Geospatial.LatLon)">
      <summary>
            Given a point, calculates if the point falls on a bounding box border or not.
            If the point is on a corner, then the point will fall into two sides.
            </summary>
      <param name="tileBoundingBox">Bounding box to test</param>
      <param name="point">point to test</param>
      <returns>Border bitmap if the point falls into border, none otherwise</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.CalculateLatLongAtPixel(Microsoft.Geospatial.TileId,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Latitude and Longitude at a given coordinate in pixel space.
            Pixel origin 0,0 is at the bottom left, proceeding up and to the right.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.ToTilePosition(Microsoft.Geospatial.TileId,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Calculates our position using the specified level of detail rather than going to the trouble of extracting ours.
            </summary>
      <returns>Position of the tile as x,y,lod</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.ToTilePosition(Microsoft.Geospatial.TileId)">
      <summary>
            Converts a TileId to a TilePosition.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.ToTileId(Microsoft.Geospatial.TilePosition)">
      <summary>
            Calculates the <see cref="T:Microsoft.Geospatial.TileId" /> from a <see cref="T:Microsoft.Geospatial.TilePosition" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetParent(Microsoft.Geospatial.TileId,System.Collections.Generic.IEnumerable{Microsoft.Geospatial.TileLevelOfDetail})">
      <summary>
            Calculate the id of the tile that is one level of detail up from 
            this tile.
            This method will return <see cref="F:Microsoft.Geospatial.TileId.Null" /> if 
            this tile has no parents.
            </summary>
      <returns>Parent tile id</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.TryGetParent(Microsoft.Geospatial.TileId,System.Collections.Generic.IEnumerable{Microsoft.Geospatial.TileLevelOfDetail},Microsoft.Geospatial.TileId@)">
      <summary>
            Try to calculate the id of the tile that is one level of detail up 
            from this tile, on condition that this parent tile is a valid Lod. If not, keep getting
            the grand parents till finding one with valid lod.
            </summary>
      <returns>True if managed to get the parent, false otherwise</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.TryGetParent(Microsoft.Geospatial.TileId,Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileId@)">
      <summary>
            Try to calculate the id of the tile that is one level of detail up from this tile, on condition that this parent tile is a valid
            level of detail. If not, keep getting the grand parents until finding one that matches the valid level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.TryGetParent(Microsoft.Geospatial.TilePosition,System.Int16,Microsoft.Geospatial.TilePosition@)">
      <summary>
            Gets the parent of the specified TilePosition using the given delta.
            </summary>
      <returns>true if the parent exists</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.IsParentOf(Microsoft.Geospatial.TilePosition,Microsoft.Geospatial.TilePosition)">
      <summary>
            Returns true if the TilePosition is a parent of the specified TilePosition.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetChildren(Microsoft.Geospatial.TileId,Microsoft.Geospatial.TileId[])">
      <summary>
            Fills out the specified array with the immediate children of this tile.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetChildrenTileIds(Microsoft.Geospatial.TilePosition,Microsoft.Geospatial.TileId[])">
      <summary>
            Fills out the specified array with the immediate children as TileIds.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetChildenAtLevelOfDetail(Microsoft.Geospatial.TileId,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Gets a list of TileId's from a ancestor tile at the desired child level
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetQuadrant(Microsoft.Geospatial.TileId)">
      <summary>
            The corner of its parent that this tile is in.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetChild(Microsoft.Geospatial.TileId,Microsoft.Geospatial.TileQuadrant)">
      <summary>
            Gets a specific child of this TileId
            </summary>
      <param name="tileId">The parent tileId from which it gets the child</param>
      <param name="quadrant">Which of the four children to retrieve</param>
      <returns>Child TileId</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetNeighbors(Microsoft.Geospatial.TileId)">
      <summary>
            For a given tileId, returns a list containing the tile id and all (up to 8) neighbors for that tile
            </summary>
      <param name="tileId"> TileId for the central tile in the neighborhood </param>
      <returns>List of tile ids, typically containing 9 tiles, unless tile is at north or south edge of world</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetQuadKey(Microsoft.Geospatial.TilePosition)">
      <summary>
            Creates the quad key string for the TilePosition.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.TryGetChildren(Microsoft.Geospatial.TileId,System.Collections.Generic.IEnumerable{Microsoft.Geospatial.TileLevelOfDetail},Microsoft.Geospatial.TileId[]@)">
      <summary>
            Calculate the children TileIds that have valid Lod from the current TileId.
            </summary>
      <returns>True if managed to get the children, false otherwise</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.CalculateSidePlanes(Microsoft.Geospatial.TileId,Microsoft.Geospatial.VectorMath.Plane3D@,Microsoft.Geospatial.VectorMath.Plane3D@,Microsoft.Geospatial.VectorMath.Plane3D@,Microsoft.Geospatial.VectorMath.Plane3D@)">
      <summary>
            Gets the planes that run along the four sides of this tile id.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.CalculateOverlappingTiles(System.Collections.Generic.IList{Microsoft.Geospatial.LatLon},Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns a list of tiles that overlap the specified ring.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.TilePosition">
      <summary>
            The position of a <see cref="T:Microsoft.Geospatial.TileId" /> within a specific <see cref="T:Microsoft.Geospatial.TileLevelOfDetail" />
            of tiles.  This is an alternate, more verbose, expression of a single tile's Id.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TilePosition.#ctor(Microsoft.Geospatial.TileLevelOfDetail,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TilePosition" /> struct from raw values.
            </summary>
      <param name="levelOfDetail">See <see cref="P:Microsoft.Geospatial.TilePosition.LevelOfDetail" />.</param>
      <param name="x">See <see cref="P:Microsoft.Geospatial.TilePosition.X" />.</param>
      <param name="y">See <see cref="P:Microsoft.Geospatial.TilePosition.Y" />.</param>
    </member>
    <member name="M:Microsoft.Geospatial.TilePosition.#ctor(Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.LatLon)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TilePosition" /> struct from a location and level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TilePosition.Equals(System.Object)">
      <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)" />.
            </summary>
      <returns>True if the object equals this tile id.</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TilePosition.Equals(Microsoft.Geospatial.TilePosition)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.TilePosition.GetHashCode">
      <summary>
            Overrides <see cref="M:System.Object.GetHashCode" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TilePosition.op_Equality(Microsoft.Geospatial.TilePosition,Microsoft.Geospatial.TilePosition)">
      <summary>
            Override equality operator.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TilePosition.op_Inequality(Microsoft.Geospatial.TilePosition,Microsoft.Geospatial.TilePosition)">
      <summary>
            Override inequality operator.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TilePosition.ToString">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Geospatial.TilePosition.X">
      <summary>
            Gets or sets the horizontal offset for this position.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.TilePosition.Y">
      <summary>
            Gets or sets the vertical offset for this position.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.TilePosition.LevelOfDetail">
      <summary>
            Gets or sets the level of detail for this position.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.TileQuadrant">
      <summary>
            Directions enumeration, for use primarily in choosing a child <see cref="T:Microsoft.Geospatial.TileId" />.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileQuadrant.Northwest">
      <summary>
            The upper left quad, coded "0".
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileQuadrant.Northeast">
      <summary>
            The upper right quad, coded "1".
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileQuadrant.Southwest">
      <summary>
            The lower left quad, coded "2".
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileQuadrant.Southeast">
      <summary>
            The lower right quad, coded "3".
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.VectorMath.Constants">
      <summary>
            Common constants used for computations.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.VectorMath.Constants.FourPi">
      <summary>
            Four times <see cref="F:System.Math.PI" />.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.VectorMath.Constants.TwoPi">
      <summary>
            Two times <see cref="F:System.Math.PI" />.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.VectorMath.Constants.PiOverTwo">
      <summary>
        <see cref="F:System.Math.PI" /> divided by two.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.VectorMath.Constants.PiOverFour">
      <summary>
        <see cref="F:System.Math.PI" /> divided by four.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.VectorMath.Constants.RadiansToDegrees">
      <summary>
            The conversion factor to transform radians to degrees.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.VectorMath.Constants.DegreesToRadians">
      <summary>
            The conversion factor to transform degrees to radians.
            </summary>
    </member>
  </members>
</doc>